include{{{
	<servo>
	"Arm.h"
}}}

constructors{{{
	"Arm arms[%%%length%%%] = {
		loop_separated_by(','){{{
			Arm(<<<base.label>>>_index, <<<shoulder.label>>>_index, <<<elbow_label>>>_index, <<<wrist>>>_index, <<<wrist_rotate>>>_index, servo_pins, servos)
		}}}
	};
}}}

commands{{{
	kSetArm,
	kDetachArm,
}}}

command_attaches{{{
	cmdMessenger.attach(kSetArm, setArm);
    cmdMessenger.attach(kDetachArm, detachArm);
}}}

command_functions{{{
	void setArm() {
        int indexNum = cmdMessenger.readBinArg<int>();
        if(!cmdMessenger.isArgOk() || indexNum < 0 || indexNum > %%%length%%%) {
        	cmdMessenger.sendBinCmd(kError, kSetArm);
        	return;
        }
        int pos[5];
        for(int i = 0; i < 5; i++) {
        	pos[i] = cmdMessenger.readBinArg<int>();
        	if(!cmdMessenger.isArgOk()){
        		cmdMessenger.sendBinCmd(kError, kSetArm);
        		return;
        	}
        }
        arms[indexNum].set(pos[0], pos[1], pos[2], pos[3], pos[4]);
        cmdMessenger.sendBinCmd(kAcknowledge, kSetArm);
    }

    void detachArm() {
        int indexNum = cmdMessenger.readBinArg<int>();
        if(!cmdMessenger.isArgOk() || indexNum < 0 || indexNum > %%%length%%%) {
        	cmdMessenger.sendBinCmd(kError, kDetachArm);
        	return;
        }
        arms[indexNum].detach();
        cmdMessenger.sendBinCmd(kAcknowledge, kDetachArm);
    }
}}}

core_values{{{
	base = <<<base.label>>>
	shoulder = <<<base.label>>>
	elbow = <<<elbow.label>>>
	wrist = <<<wrist.label>>>
	wrist_rotate = <<<wrist_rotate.label>>>
}}}